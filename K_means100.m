%% 设置地面大小和高度
ground_size = [500, 500];%长1000米 宽1000米
ground_height = 100;%空间高100米
%% 随机生成100个地面用户的位置
user_num = 100;
%  user_pos = (rand(2, user_num) .* repmat([ground_size]', 1, user_num))';%随机生成140个坐标 然后转置
user_pos = [234,123;484,71;250,107;17,391;143,304;363,340;111,125;
    342,268;279,177;363,301;480,229;339,190;305,296;58,173;231,247;
    317,300;181,481;363,19;75,348;160,251;273,220;229,497;424,256;109,53;
    489,332;209,35;496,311;354,15;8,307;455,317;379,76;383,273;495,368;35,392;
    368,452;52,408;431,280;369,107;370,307;8,14;136,103;363,40;438,302;344,104;
    140,255;13,11;263,220;354,460;486,339;489,177;11,158;206,304;341,456;74,372;
    288,375;72,7;303,265;9,188;7,377;363,236;464,261;142,264;65,204;8,351;163,406;109,312;
    68,325;110,147;352,237;274,258;350,56;421,220;247,210;228,199;169,335;407,247;331,261;345,469;
    451,307;236,206;383,143;314,23;49,130;457,348;496,366;446,260;490,321;264,323;424,46;183,56;467,474;252,336;
    464,207;201,314;65,18;61,22;286,485;50,251;413,411;395,260];%固定100个用户坐标点
user_pos(3,:)=0; %用户高为0         
%% 用户优先级模型  用户第4列
i = user_num;
EimaxlowerLimit = 1.17;  %wh 
EimaxupperLimit = 3.5;     %wh
Eimax = [EimaxlowerLimit + (EimaxupperLimit- EimaxlowerLimit) * rand(1, i)]';%用户最大能量
%随机生成的一组固定值
Eimax= round(Eimax, 2);%保留两位小数
Eimax=[3.06000000000000;3.07000000000000;2;3.40000000000000;2.83000000000000;2.42000000000000;3.21000000000000;1.63000000000000;2.25000000000000;2.63000000000000;2.26000000000000;1.64000000000000;2.13000000000000;3.05000000000000;1.27000000000000;1.86000000000000;1.55000000000000;3.17000000000000;2.29000000000000;3.39000000000000;2.91000000000000;3.31000000000000;1.71000000000000;1.98000000000000;2.14000000000000;1.80000000000000;1.58000000000000;2.60000000000000;3.08000000000000;1.85000000000000;2.86000000000000;2.19000000000000;1.82000000000000;3.17000000000000;2.21000000000000;2.18000000000000;1.88000000000000;2.45000000000000;1.48000000000000;2.83000000000000;2.93000000000000;2.08000000000000;3.22000000000000;2.30000000000000;1.63000000000000;3.34000000000000;2.09000000000000;1.67000000000000;1.27000000000000;1.82000000000000;1.64000000000000;1.76000000000000;1.22000000000000;1.86000000000000;2.51000000000000;1.89000000000000;2.23000000000000;2.45000000000000;3.42000000000000;3.33000000000000;1.46000000000000;3.03000000000000;1.32000000000000;2.79000000000000;1.98000000000000;1.48000000000000;2.24000000000000;2.26000000000000;3.47000000000000;2.26000000000000;1.63000000000000;1.74000000000000;3.35000000000000;2.91000000000000;2.37000000000000;2.98000000000000;3.43000000000000;2.75000000000000;1.78000000000000;2.15000000000000;1.82000000000000;1.25000000000000;2.90000000000000;3.06000000000000;2.04000000000000;1.84000000000000;1.57000000000000;2.66000000000000;3.25000000000000;3.39000000000000;3.28000000000000;2.56000000000000;2.69000000000000;2.62000000000000;2.15000000000000;3.02000000000000;1.82000000000000;3.09000000000000;2.61000000000000;2.93000000000000];

betailowerLimit=1;
betaiupperLimit=3;
betai=[betailowerLimit + (betaiupperLimit- betailowerLimit) * rand(1, i)]';%延迟容忍度
%随机生成的一组固定值
betai= round(betai, 2);%保留两位小数
betai=[2.19000000000000;2.94000000000000;2.25000000000000;1.17000000000000;2.53000000000000;2.16000000000000;1.03000000000000;1.30000000000000;2.40000000000000;2.09000000000000;2.26000000000000;2.14000000000000;2.87000000000000;1.23000000000000;2.42000000000000;1.48000000000000;1.83000000000000;2.98000000000000;2.69000000000000;1.73000000000000;2.49000000000000;1.23000000000000;2.16000000000000;2.78000000000000;2.51000000000000;2.91000000000000;2.45000000000000;2.75000000000000;2.01000000000000;2.43000000000000;2.28000000000000;1.97000000000000;2.06000000000000;2.09000000000000;1.68000000000000;1.08000000000000;2.71000000000000;1.26000000000000;2.07000000000000;2.44000000000000;2.16000000000000;2.61000000000000;2.81000000000000;2.75000000000000;1.19000000000000;2.04000000000000;1.13000000000000;1.38000000000000;1.63000000000000;2.65000000000000;2.62000000000000;2.60000000000000;2.63000000000000;1.04000000000000;1.29000000000000;1.06000000000000;2;1.92000000000000;1.62000000000000;2.30000000000000;2.27000000000000;1.40000000000000;2.19000000000000;2.14000000000000;1.18000000000000;2.88000000000000;1.44000000000000;1.84000000000000;2.26000000000000;1.55000000000000;2.72000000000000;1.24000000000000;1.99000000000000;2.80000000000000;1.19000000000000;2.74000000000000;2.65000000000000;1.40000000000000;1.08000000000000;1.21000000000000;2.55000000000000;1.68000000000000;2.38000000000000;1.79000000000000;2.97000000000000;2.55000000000000;1.99000000000000;1.53000000000000;1.08000000000000;2.73000000000000;2.83000000000000;2.15000000000000;2.32000000000000;2.11000000000000;2.01000000000000;1.08000000000000;2.46000000000000;2.67000000000000;2.85000000000000;2.12000000000000];

TilowerLimit=10;
TiupperLimit=50;
Ti=[TilowerLimit + (TiupperLimit- TilowerLimit) * rand(1, i)]';%理想可容忍延迟
% 随机生成的一组固定值

Ti= round(Ti, 2);%保留两位小数
Ti=[22.4300000000000;26.3800000000000;30.6500000000000;38.4400000000000;19.1400000000000;29.9200000000000;41.5100000000000;10.4800000000000;16.2400000000000;17.7900000000000;46.6000000000000;43.3300000000000;15.4800000000000;36.1000000000000;37.8800000000000;19.6300000000000;46.1900000000000;49.1600000000000;48.3800000000000;34.5800000000000;30.1400000000000;47.0700000000000;10.0600000000000;29.9100000000000;14.5600000000000;15.5300000000000;14.0800000000000;27.4200000000000;10.1400000000000;37.6300000000000;49.5700000000000;28.6900000000000;45.8600000000000;14.3100000000000;11.5700000000000;19.3100000000000;21.3800000000000;18.9600000000000;19.7100000000000;48.8000000000000;20.2100000000000;36.3700000000000;37.5700000000000;37.3900000000000;11.5100000000000;17.2200000000000;28.0400000000000;22.6900000000000;21.8400000000000;28.3200000000000;21.6800000000000;47.6900000000000;31.0500000000000;28.6200000000000;13.4300000000000;41.6900000000000;44.0900000000000;41.9700000000000;27.8800000000000;26.1300000000000;17.9200000000000;44;12.5900000000000;24.2800000000000;21.3100000000000;31.6400000000000;28.1700000000000;14.7800000000000;10.5300000000000;42;10.9600000000000;24.2200000000000;30.3600000000000;24.2600000000000;27.8600000000000;17.0500000000000;34.1100000000000;20.8200000000000;43.3200000000000;33.0900000000000;45.3400000000000;41.2000000000000;28.7800000000000;36.9400000000000;11.2400000000000;41.9100000000000;45.4400000000000;27.8300000000000;19.5600000000000;12.1000000000000;43.3900000000000;44.9200000000000;41.4800000000000;36.9800000000000;31.5600000000000;25.2000000000000;29.8400000000000;24.1800000000000;10.9200000000000;45.7400000000000];


TlowerLimit=100;
TupperLimit=300;
T=[TlowerLimit + (TupperLimit- TlowerLimit) * rand(1, i)]'; %服务期持续时间
%随机生成的一组固定值
T= round(T, 2);%保留两位小数 
T=[127.580000000000;206.740000000000;217.340000000000;228.310000000000;101.340000000000;173.510000000000;214.420000000000;122.180000000000;241.960000000000;166.630000000000;270.430000000000;141.080000000000;103.770000000000;196.360000000000;208.220000000000;171.920000000000;199.880000000000;201.620000000000;234.410000000000;135.330000000000;135.650000000000;265.420000000000;149.190000000000;171.930000000000;231.660000000000;274.760000000000;283.850000000000;188.490000000000;289.880000000000;110.340000000000;211.840000000000;154.990000000000;204.270000000000;236.210000000000;213.570000000000;159.160000000000;248.170000000000;144.970000000000;203.900000000000;286.670000000000;262.990000000000;155.750000000000;161.160000000000;272.650000000000;123.920000000000;258.520000000000;113.810000000000;247.140000000000;294.120000000000;143.030000000000;143.290000000000;146.910000000000;123.330000000000;258.200000000000;261.310000000000;265.390000000000;147.320000000000;132.720000000000;196.470000000000;219.500000000000;215.860000000000;129.430000000000;184.090000000000;234.110000000000;249.980000000000;188.240000000000;116.140000000000;265.630000000000;284.670000000000;167.120000000000;183.290000000000;239.510000000000;135.390000000000;101.080000000000;128.580000000000;144.120000000000;134.200000000000;280.340000000000;216.340000000000;204.410000000000;134.980000000000;146.430000000000;204.080000000000;284.580000000000;128.610000000000;140.130000000000;203.180000000000;139.900000000000;262.080000000000;104.040000000000;218.180000000000;270.560000000000;177.640000000000;212.430000000000;249.870000000000;214.080000000000;140.260000000000;161.100000000000;249.560000000000;192.790000000000];
Eir=zeros(i, 1);
for j = 1:i
    lowerLimit = 0;
    upperLimit = Eimax(j);
    Eir(j) =lowerLimit + (upperLimit - lowerLimit) * rand;%用户剩余能量
end
%随机生成的一组固定值

Eir= round( Eir, 2);%保留两位小数
Eir=[2.56000000000000;2.34000000000000;1.22000000000000;3.06000000000000;0.140000000000000;1.52000000000000;3.11000000000000;0.690000000000000;1.44000000000000;2.03000000000000;0.470000000000000;0.0700000000000000;1.46000000000000;2.54000000000000;1.05000000000000;0.540000000000000;1.06000000000000;0.0400000000000000;1.86000000000000;2.30000000000000;0.150000000000000;1.45000000000000;0.160000000000000;0.750000000000000;1.95000000000000;1.37000000000000;1.45000000000000;1.09000000000000;2.98000000000000;1.80000000000000;0.710000000000000;1.28000000000000;1.36000000000000;3;0.680000000000000;1.95000000000000;1.35000000000000;1.94000000000000;0.290000000000000;1.39000000000000;1.57000000000000;0.780000000000000;2.28000000000000;1.15000000000000;0.900000000000000;2.59000000000000;0.380000000000000;1.53000000000000;1.07000000000000;1.63000000000000;1.61000000000000;1.06000000000000;0.950000000000000;1.64000000000000;2;0.620000000000000;1.17000000000000;0.880000000000000;1.53000000000000;2.96000000000000;0.490000000000000;1.77000000000000;0.700000000000000;0.650000000000000;1.30000000000000;0.100000000000000;0.560000000000000;0.400000000000000;3.03000000000000;1.18000000000000;0.380000000000000;0.500000000000000;1.03000000000000;2.35000000000000;1.13000000000000;0.100000000000000;2.20000000000000;1.30000000000000;0.850000000000000;1.27000000000000;0.270000000000000;0.710000000000000;0.220000000000000;0.280000000000000;1.42000000000000;1.57000000000000;0.700000000000000;2.17000000000000;1.38000000000000;2.09000000000000;1.24000000000000;0.740000000000000;2.12000000000000;1.15000000000000;1.34000000000000;2.74000000000000;0.640000000000000;1.95000000000000;2.37000000000000;2.65000000000000];
%计算每个用户的优先级
faie=0.5;
fait=0.5;
for j=1:i
detai(j)=faie*exp(-Eir(j)/Eimax(j))+fait*exp(-betai(j)*Ti(i)/T(j));%每个用户优先级
user_pos(j,4)=detai(j);%用户优先级存在用户第4列 数越小优先级越高
end
user_pos = sortrows(user_pos, 4); %根据每个用户的优先级对用户特征集进行排序  此时数据是固定的
%% k-means++ 第一步即选取一个初始的聚类中心。使得选取的聚类中心尽可能地分散  解决P1问题 划分为12个组
%%%%%%%%因为每一次初始选的聚类中心的是随机的 所以每次运行得到更新后的聚类特征集都不同%%%%%%%%%%%%%%%%%
data = user_pos(:,1:2);% 每行数据包含x,y两个坐标
[num_rows, num_columns] = size(data);% 获取数据的行数和列数
num_clusters = 12;% 设置聚类的个数
K=num_clusters;%簇的个数 总区域个数
% center_indices = randi(num_rows, 1, 1);
% distances = sum((data - data(center_indices,:)).^2, 2);
%
% for i = 2:num_clusters
%     min_distances = min(distances, [], 2);
%     probabilities = min_distances / sum(min_distances);
%     center_indices(i) = randsample(num_rows, 1, true, probabilities);  
%     new_distances = sum((data - data(center_indices(i),:)).^2, 2);  
%     distances = min(distances, new_distances);
% end
% 

% for i = 1:user_num
%     user_coord = data(i, 1:2); 
%     min_dist = Inf; 
%     for j = 1:num_clusters
%         dist = norm(user_coord - data(center_indices(j), 1:2)); 
%         if dist < min_dist
%             min_dist = dist;
%             user_pos(i,5) = j; 
%         end
%     end
% end
% 
%
%      cluster_features=zeros(num_clusters,4);  
% 
%     for j=1:num_clusters
%          cluster_features(j,1:4) = cluster_features(j,1:4)+ sum(user_pos(user_pos(:,5) == j,1:4),1);
%     end

%     for j=1:num_clusters
%          cluster_features_new(j,1:4) = cluster_features(j,1:4)/size(user_pos(user_pos(:,5) == j),1);
%     end       
%     


% center_coord=data(center_indices,:);%Kmeans++聚类中心坐标
% while ~isequal(center_coord, cluster_features_new(:,1:2))
%     center_coord = cluster_features_new(:,1:2);%

%     for i = 1:user_num
%         user_coord = data(i, 1:2); % 获取用户坐标 
%         min_dist =200; % 初始化最小距离
%         for j = 1:num_clusters
%             dist = norm(user_coord -center_coord (j,:)) ; 
%             if dist < min_dist
%                 min_dist = dist;
%                 user_pos(i,5) = j; 
%             end
%         end
%     end
%           cluster_features_new=zeros(num_clusters,4);
%        for j = 1:num_clusters
%             cluster_features_new(j,1:4) = cluster_features_new(j,1:4)+ sum(user_pos(user_pos(:,5) == j,1:4),1);
%        end
%        for j = 1:num_clusters   
%             cluster_features_new(j,1:4) = cluster_features_new(j,1:4)/size(user_pos(user_pos(:,5) == j),1);  
%       end  
% end
cluster_features_new=[350.375000000000,463,0,0.606438138050569;159.222222222222,305,0,0.612600146372917;375.181818181818,63.6363636363636,0,0.626537869198298;263.333333333333,214.111111111111,0,0.612982448323656;190.500000000000,79.2500000000000,0,0.510671994266435;52.5000000000000,375.200000000000,0,0.603425219502926;288.166666666667,315.833333333333,0,0.589946271239080;46.8571428571429,17.8571428571429,0,0.625312638916467;57.8750000000000,172,0,0.602455784642112;362.444444444444,275.888888888889,0,0.558137877053962;447.333333333333,237.444444444444,0,0.609828328977496;475.300000000000,331.100000000000,0,0.564285924144751];
center_coord=  cluster_features_new(:,1:2);  
user_pos(:,5)=[4;12;7;9;1;11;5;12;11;5;10;12;3;2;1;9;11;10;12;4;10;10;6;7;6;2;12;5;11;10;12;6;10;10;3;7;6;1;3;8;3;8;6;4;8;2;9;3;1;9;9;8;6;12;9;2;8;3;1;6;4;4;7;10;2;5;2;12;2;3;8;3;4;2;6;11;6;4;11;3;12;1;7;11;2;1;7;6;10;1;4;4;3;11;3;9;11;8;9;12];

newColumn = (1:num_clusters)';
cluster_features_new = [  cluster_features_new , newColumn];

newColumn = (1:num_clusters)';
center_coord_1 = [center_coord , newColumn];